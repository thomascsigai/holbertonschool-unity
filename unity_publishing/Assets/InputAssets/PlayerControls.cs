//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputAssets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""movementActionMap"",
            ""id"": ""1ad04f7c-e365-4113-84a9-7919ed7fe00a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e944eed7-2027-4cf7-be2e-33248e7ffc40"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""bba7b7d8-99a2-4846-9964-b52a2a4b825c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2b70f4ad-ece5-4f9c-b1e6-bcb0835dc062"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fcf3ad0b-e299-4089-9d07-b6e15e5cae74"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c39c40b9-5681-42d8-a9d0-314da0caffca"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""97a8b958-fa4a-405c-a634-9eff7a327a9c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""a81a63e6-ff15-4b76-9f9b-216f88cfaf5b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""97558324-955a-475e-8927-4cfce8d99c5b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2b099630-6099-42ca-9f99-7babc3f555c3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""45a55779-5722-491f-bafa-49b11ea8b8b6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8c6def02-9ad6-4694-8ed5-5ce33495d2bd"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UIInputsActionMap"",
            ""id"": ""ba85233f-8868-427e-99d0-91faebacfbd3"",
            ""actions"": [
                {
                    ""name"": ""BackToMenu"",
                    ""type"": ""Button"",
                    ""id"": ""ca102813-d29c-4a87-a6d4-ce12b71b228e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""12a4f8a8-a0a6-4988-8066-49c8c8e70e11"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackToMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // movementActionMap
        m_movementActionMap = asset.FindActionMap("movementActionMap", throwIfNotFound: true);
        m_movementActionMap_Move = m_movementActionMap.FindAction("Move", throwIfNotFound: true);
        // UIInputsActionMap
        m_UIInputsActionMap = asset.FindActionMap("UIInputsActionMap", throwIfNotFound: true);
        m_UIInputsActionMap_BackToMenu = m_UIInputsActionMap.FindAction("BackToMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // movementActionMap
    private readonly InputActionMap m_movementActionMap;
    private List<IMovementActionMapActions> m_MovementActionMapActionsCallbackInterfaces = new List<IMovementActionMapActions>();
    private readonly InputAction m_movementActionMap_Move;
    public struct MovementActionMapActions
    {
        private @PlayerControls m_Wrapper;
        public MovementActionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_movementActionMap_Move;
        public InputActionMap Get() { return m_Wrapper.m_movementActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementActionMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementActionMapActions instance)
        {
            if (m_Wrapper.m_MovementActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActionMapActions @movementActionMap => new MovementActionMapActions(this);

    // UIInputsActionMap
    private readonly InputActionMap m_UIInputsActionMap;
    private List<IUIInputsActionMapActions> m_UIInputsActionMapActionsCallbackInterfaces = new List<IUIInputsActionMapActions>();
    private readonly InputAction m_UIInputsActionMap_BackToMenu;
    public struct UIInputsActionMapActions
    {
        private @PlayerControls m_Wrapper;
        public UIInputsActionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BackToMenu => m_Wrapper.m_UIInputsActionMap_BackToMenu;
        public InputActionMap Get() { return m_Wrapper.m_UIInputsActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIInputsActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IUIInputsActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_UIInputsActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIInputsActionMapActionsCallbackInterfaces.Add(instance);
            @BackToMenu.started += instance.OnBackToMenu;
            @BackToMenu.performed += instance.OnBackToMenu;
            @BackToMenu.canceled += instance.OnBackToMenu;
        }

        private void UnregisterCallbacks(IUIInputsActionMapActions instance)
        {
            @BackToMenu.started -= instance.OnBackToMenu;
            @BackToMenu.performed -= instance.OnBackToMenu;
            @BackToMenu.canceled -= instance.OnBackToMenu;
        }

        public void RemoveCallbacks(IUIInputsActionMapActions instance)
        {
            if (m_Wrapper.m_UIInputsActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIInputsActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_UIInputsActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIInputsActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIInputsActionMapActions @UIInputsActionMap => new UIInputsActionMapActions(this);
    public interface IMovementActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IUIInputsActionMapActions
    {
        void OnBackToMenu(InputAction.CallbackContext context);
    }
}
